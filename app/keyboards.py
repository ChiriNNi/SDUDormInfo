from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardButton, InlineKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, or_

from app.database.models import Room, Specialty
from app.database.requests import async_session, get_faculties, get_specialty, get_room, get_booked_count

main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù'),
    KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º—Ü–∏—è –æ –æ–±—â–µ–∂–∏—Ç–∏–∏ üè†')]
],
                           resize_keyboard=True)

book = ReplyKeyboardMarkup(keyboard=[[
    KeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"),
    KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]
], resize_keyboard=True)

def gender_keyboard():
    builder = InlineKeyboardBuilder()

    button_male = InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üë®", callback_data="gender_male")
    button_female = InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üë©", callback_data="gender_female")

    builder.add(button_male, button_female)
    builder.adjust(2)

    return builder.as_markup()


async def faculty_keyboard():
    # faculties = [
    #     ("–ò–Ω–∂–µ–Ω–µ—Ä–∏–∏ –∏ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—É–∫", "engineering"),
    #     ("–ü–µ–¥–∞–≥–æ–≥–∏–∫–∏ –∏ –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫", "pedagogy"),
    #     ("–ü—Ä–∞–≤–∞ –∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—É–∫", "law"),
    #     ("–®–∫–æ–ª–∞ –ë–∏–∑–Ω–µ—Å–∞ –°–î–£", "business")
    # ]

    faculties = await get_faculties()

    builder = InlineKeyboardBuilder()

    for faculty in faculties:
        builder.add(InlineKeyboardButton(text=faculty.name, callback_data=f'faculty_{faculty.id}'))

    builder.adjust(1)

    return builder.as_markup()


async def specialty_keyboard(faculty_id):
    builder = InlineKeyboardBuilder()

    # –ú–∞–ø–ø–∏–Ω–≥ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã
    # faculty_codes = {
    #     "engineering": 1,
    #     "pedagogy": 2,
    #     "law": 3,
    #     "business": 4
    # }

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∫–æ–¥–∞–º–∏
    # specialties = {
    #     1: [
    #         ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "s1"),
    #         ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞", "s2"),
    #         ("–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏", "s3"),
    #         ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "s4"),
    #         ("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "s5"),
    #         ("–ú—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ –Ω–∞—É–∫–∏", "s6"),
    #         ("–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "s7"),
    #         ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö", "s8")
    #     ],
    #     2: [
    #         ("–î–≤–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–∞", "s9"),
    #         ("–î–æ—à–∫–æ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ", "s10"),
    #         ("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "s11"),
    #         ("–ò—Å—Ç–æ—Ä–∏—è", "s12"),
    #         ("–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "s13"),
    #         ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø–µ–¥–∞–≥–æ–≥–∏–∫–∞)", "s14"),
    #         ("–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –º–µ—Ç–æ–¥–∏–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", "s15"),
    #         ("–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "s16"),
    #         ("–ü–µ—Ä–µ–≤–æ–¥—á–µ—Å–∫–æ–µ –¥–µ–ª–æ", "s17"),
    #         ("–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è —Ñ–∏–ª–æ–ª–æ–≥–∏—è", "s18"),
    #         ("–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞", "s19"),
    #         ("–§–∏–∑–∏–∫–∞ –∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "s20"),
    #         ("–•–∏–º–∏—è –∏ –ë–∏–æ–ª–æ–≥–∏—è", "s21")
    #     ],
    #     3: [
    #         ("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—Ä–∞–≤–æ", "s22"),
    #         ("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "s23"),
    #         ("–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "s24"),
    #         ("–ü—Ä–∞–≤–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "s25"),
    #         ("–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "s26"),
    #         ("–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –ø—Ä–∞–≤–æ", "s27")
    #     ],
    #     4: [
    #         ("–î–∏–¥–∂–∏—Ç–∞–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "s28"),
    #         ("–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "s29"),
    #         ("–£—á–µ—Ç –∏ –ê—É–¥–∏—Ç", "s30"),
    #         ("–§–∏–Ω–∞–Ω—Å—ã", "s31"),
    #         ("–≠–∫–æ–Ω–æ–º–∏–∫–∞", "s32")
    #     ]
    # }

    specialities = await get_specialty(faculty_id);
    print(specialities)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    for specialty in specialities:
        builder.add(InlineKeyboardButton(text=specialty.name, callback_data=f'specialty_{specialty.id}'))

    builder.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))

    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return builder.as_markup()

async def room_keyboard(specialty_id: int, gender: str, page: int = 1, page_size: int = 10) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    async with async_session() as session:
        stmt = (
            select(Room)
            .join(Room.specialties)
            .where(Specialty.id == specialty_id)
        )

        if gender == 'male':
            stmt = stmt.where(
                or_(
                    Room.number.like("–°%"),
                    Room.number.like("D%")
                )
            )
        else:
            stmt = stmt.where(
                or_(
                    Room.number.like("A%"),
                    Room.number.like("B%")
                )
            )

        result = await session.execute(stmt)
        rooms = result.scalars().all()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_rooms = len(rooms)
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    rooms_on_page = rooms[start_index:end_index]

    for room in rooms_on_page:
        builder.add(InlineKeyboardButton(text=room.number, callback_data=f'room_{room.number}'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 1:
        builder.add(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f'pagination_{page - 1}'))
    if end_index < total_rooms:
        builder.add(InlineKeyboardButton(text="‚û° –î–∞–ª–µ–µ", callback_data=f'pagination_{page + 1}'))

    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    return builder.as_markup()

