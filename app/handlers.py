import asyncio
import logging
import os
from datetime import datetime

from app.approve import start_timer, update_payment_status
from config import TOKEN
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import ContentType
import app.keyboards as keyboards
from app.database.requests import post_user, get_roommates, get_faculty, get_specialty_one

#from app.database.requests import post_user

router = Router()
bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–Ω–∫–µ—Ç—ã
class Registration(StatesGroup):
    surname = State()
    name = State()
    gender = State()
    faculty = State()
    specialty = State()
    phone_number = State()
    city = State()
    room = State()
    sleep_mode = State()
    wake_up_time = State()
    noise_at_night = State()
    order_room = State()
    religion = State()
    roommate_traits = State()
    wishes = State()
    payment_accommodation = State()
    payment_food = State()
    is_approved_payment = State()

@router.message(Command('start'))
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboards.main)

@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±—â–µ–∂–∏—Ç–∏–∏ üè†")
async def register(message: Message, state: FSMContext):
    information_message = open("messages/main_information.txt", "r")
    await state.set_state(Registration.surname)
    await message.answer(information_message.read(), reply_markup=keyboards.main)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(F.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù")
async def register(message: Message, state: FSMContext):
    await state.set_state(Registration.surname)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:', reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
@router.message(Registration.surname)
async def register_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(Registration.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@router.message(Registration.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.gender)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=keyboards.gender_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞
@router.callback_query(lambda c: c.data.startswith('gender_'))
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    gender = callback_query.data.split('_')[1]
    ru_gender = {
        "male": "–ú—É–∂—Å–∫–æ–π",
        "female": "–ñ–µ–Ω—Å–∫–∏–π"
    }
    await callback_query.message.edit_text(f"–í–∞—à –ø–æ–ª: {ru_gender[gender]}")
    await state.update_data(gender=gender)
    await state.set_state(Registration.faculty)
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup= await keyboards.faculty_keyboard())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@router.callback_query(lambda c: c.data.startswith('faculty_'))
async def process_faculty(callback_query: CallbackQuery, state: FSMContext):
    logging.info(f"Received callback data: {callback_query.data}")
    faculty = callback_query.data.split('_', 1)[1]
    await state.update_data(faculty=faculty)
    await state.set_state(Registration.specialty)

    await callback_query.message.delete()

    specialty_keyboard = await keyboards.specialty_keyboard(faculty)
    await callback_query.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {faculty}:',
        reply_markup=specialty_keyboard
    )

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
@router.callback_query(lambda c: c.data.startswith('specialty_'))
async def process_specialty(callback_query: CallbackQuery, state: FSMContext):
    specialty = callback_query.data.split('_')[1]

    await state.update_data(specialty=specialty)
    await callback_query.message.delete()
    await callback_query.message.answer("–°–µ–π—á–∞—Å –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—á–µ—Å—Ç–Ω–æ). \n\n–í–ê–®–ò –û–¢–í–ï–¢–´ –ë–£–î–£–¢ –í–ò–î–ù–´ –î–†–£–ì–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú")

    # await state.set_state(Registration.room)
    await state.set_state(Registration.sleep_mode)
    await callback_query.message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å?", reply_markup= keyboards.sleep_keyboard())

@router.callback_query(lambda c: c.data.startswith('sleep_'))
async def process_sleep_mode(callback_query: CallbackQuery, state: FSMContext):
    sleep_mode = callback_query.data.split('_')[1]
    await callback_query.message.delete()
    await state.update_data(sleep_mode=sleep_mode)

    await state.set_state(Registration.wake_up_time)
    await callback_query.message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å?", reply_markup= keyboards.wake_keyboard())

@router.callback_query(lambda c: c.data.startswith('wake_'))
async def process_wake_up(callback: CallbackQuery, state: FSMContext):
    wake_up_time = callback.data.split("_")[1]
    await callback.message.delete()
    await state.update_data(wake_up_time=wake_up_time)

    await state.set_state(Registration.noise_at_night)
    await callback.message.answer("–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —à—É–º—É –≤ –∫–æ–º–Ω–∞—Ç–µ –≤–µ—á–µ—Ä–æ–º?", reply_markup= keyboards.noise_keyboard())

@router.callback_query(lambda c: c.data.startswith('silence_'))
async def process_noise_at_night(callback: CallbackQuery, state: FSMContext):
    noise_at_night = callback.data.split("_")[1]
    await callback.message.delete()
    await state.update_data(noise_at_night=noise_at_night)
    await state.set_state(Registration.order_room)
    await callback.message.answer("–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ø–æ—Ä—è–¥–∫—É –≤ –æ–±—â–µ–π —á–∞—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã?", reply_markup= keyboards.order_keyboard())

@router.callback_query(lambda c: c.data.startswith('order_'))
async def process_order_room(callback: CallbackQuery, state: FSMContext):
    order_room = callback.data.split("_")[1]
    await callback.message.delete()
    await state.update_data(order_room=order_room)
    await state.set_state(Registration.religion)
    await callback.message.answer("–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∞—à —Ä—É–º–º–µ–π—Ç –±—ã–ª —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–º?", reply_markup= keyboards.religion_keyboard())

@router.callback_query(lambda c: c.data.startswith('religion_'))
async def process_religion(callback: CallbackQuery, state: FSMContext):
    religion = callback.data.split("_")[1]
    await callback.message.delete()
    await state.update_data(religion=religion)
    await state.set_state(Registration.roommate_traits)
    await callback.message.answer("–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã –≤ —Ä—É–º–º–µ–π—Ç–µ?", reply_markup=ReplyKeyboardRemove())

@router.message(Registration.roommate_traits)
async def process_roommate_traits(message: Message, state: FSMContext):
    roommate_traits = message.text
    await state.update_data(roommate_traits=roommate_traits)
    await state.set_state(Registration.wishes)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä—É–º–º–µ–π—Ç—É?")

@router.message(Registration.wishes)
async def process_wishes(message: Message, state: FSMContext):
    wishes = message.text
    await state.update_data(wishes=wishes)
    data = await state.get_data()
    specialty = data['specialty']
    gender = data['gender']

    markup = await keyboards.room_keyboard(int(specialty), gender, page=1)
    await state.set_state(Registration.room)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:', reply_markup=markup)

@router.callback_query(lambda c: c.data.startswith("pagination_"))
async def handle_pagination(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback_query.data.split("_")[1])
    data = await state.get_data()

    specialty_id = data.get("specialty")
    gender = data.get("gender")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = await keyboards.room_keyboard(specialty_id, gender, page)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@router.callback_query(lambda c: c.data == 'back')
async def process_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await state.set_state(Registration.faculty)

    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=await keyboards.faculty_keyboard())

    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith('room_'))
async def register_room(callback_query: CallbackQuery, state: FSMContext):
    room = callback_query.data.split('_')[1]
    await state.update_data(room=room)
    print(f"{room} fefsfsf")
    #await state.update_data(room=room)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É {room} –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
        reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    list_roommates = await get_roommates(room)
    if len(list_roommates) > 0:
        for roommate in list_roommates:
            await callback_query.message.answer(str(roommate), reply_markup=keyboards.book)
    else:
        await callback_query.message.answer("–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", reply_markup=keyboards.book)
    await callback_query.answer()



@router.message(F.text == '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
async def process_book(message: Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    room = data["room"]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É

    if not room:
        # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∫–æ–º–Ω–∞—Ç–æ–π
    await state.update_data(room=room)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(Registration.phone_number)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=ReplyKeyboardRemove())


@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
async def process_decline(message: Message, state: FSMContext):
    await state.set_state(Registration.room)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    specialty = data.get('specialty')
    gender = data.get('gender')

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.delete()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=ReplyKeyboardRemove())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ specialty –∏ gender
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:', reply_markup=await keyboards.room_keyboard(int(specialty), gender))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
@router.message(Registration.phone_number)
async def register_phone_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await state.set_state(Registration.city)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:')

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Registration.city)
async def register_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    await post_user(data)
    start_time = datetime.now()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(start_timer(data["phone_number"], start_time))
    faculty = await get_faculty(data['faculty'])
    ru_gender = {
        "male": "–ú—É–∂—Å–∫–æ–π",
        "female": "–ñ–µ–Ω—Å–∫–∏–π"
    }
    specialty = await get_specialty_one((data['specialty']))
    await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                         f'–§–∞–º–∏–ª–∏—è: {data["surname"]}\n'
                         f'–ò–º—è: {data["name"]}\n'
                         f'–ü–æ–ª: {ru_gender[data["gender"]]}\n'
                         f'–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty.name}\n'
                         f'–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty.name}\n'
                         f'–ì–æ—Ä–æ–¥: {data["city"]}\n'
                         f'–ö–æ–º–Ω–∞—Ç–∞: {data.get("room", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")}\n'
                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.get("phone_number", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")}\n')

    await state.set_state(Registration.payment_accommodation)
    await message.answer("‚ö†Ô∏è–í–ê–ñ–ù–û! –ï—Å–ª–∏ –≤—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∑–∞ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä–∏–¥—Ü–∞—Ç–∏ –º–∏–Ω—É—Ç, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.‚ö†Ô∏è\n\n–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ.\n–ó–∞ –æ–¥–∏–Ω —Å–µ–º–µ—Å—Ç—Ä 234000,\n–ó–∞ —É—á–µ–±–Ω—ã–π –≥–æ–¥ 468000 —Ç–µ–Ω–≥–µ",
                         reply_markup=keyboards.payment_keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ


# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
PAYMENTS_FOLDER = 'payments/'

# File save location

@router.message(Registration.payment_accommodation, F.content_type == ContentType.DOCUMENT)
async def handle_accommodation_payment_pdf(message: Message, state: FSMContext):

    data = await state.get_data()
    document = message.document

    # Ensure the folder exists
    os.makedirs(PAYMENTS_FOLDER, exist_ok=True)

    # File path
    file_path = os.path.join(PAYMENTS_FOLDER, document.file_name)

    new_file_name = f"accommodation_payment_{data["phone_number"]}.pdf"

    # File path
    file_path = os.path.join(PAYMENTS_FOLDER, new_file_name)

    # Download the file
    await bot.download(document.file_id, destination=file_path)

    # Save the file path in the FSM context
    await state.update_data(payment_accommodation=file_path)

    # Send response and update state
    await message.answer(
        "–ß–µ–∫ –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∑–∞ –µ–¥—É.\n–ó–∞ –æ–¥–∏–Ω —Å–µ–º–µ—Å—Ç—Ä 213750 —Ç–µ–Ω–≥–µ.\n–ó–∞ –æ–¥–∏–Ω —É—á–µ–±–Ω—ã–π –≥–æ–¥ 427500 —Ç–µ–Ω–≥–µ.",
        reply_markup=keyboards.food_payment_keyboard
    )
    await state.set_state(Registration.payment_food)


@router.message(Registration.payment_food, F.content_type == ContentType.DOCUMENT)
async def handle_food_payment_pdf(message: Message, state: FSMContext):
    data = await state.get_data()
    document = message.document

    # Ensure the folder exists
    os.makedirs(PAYMENTS_FOLDER, exist_ok=True)

    new_file_name = f"dinner_payment_{data["phone_number"]}.pdf"

    # File path
    file_path = os.path.join(PAYMENTS_FOLDER, new_file_name)

    # Download the file
    await bot.download(document.file_id, destination=file_path)

    # Save the file path in the FSM context
    await state.update_data(payment_food=file_path)
    data = await state.get_data()
    # Send confirmation
    await message.answer("""–ß–µ–∫ –∑–∞ –µ–¥—É –ø–æ–ª—É—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–∞—Å!\nüìÑ –ü–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—â–µ–∂–∏—Ç–∏—è:
¬∑ –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
¬∑ 075 –∏ 063 —Ñ–æ—Ä–º–∞, —Ñ–ª—é—Ä–æ–≥—Ä–∞—Ñ–∏—è
¬∑ –ß–µ–∫ –∑–∞ –æ–ø–ª–∞—Ç—É
¬∑ 3x4 —Ñ–æ—Ç–æ ‚Äì 2 —à—Ç—É–∫
¬∑ –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö)""")
    await update_payment_status(int(data["phone_number"]), str(data["payment_accommodation"]), str(data["payment_food"]))

    await state.set_state(Registration.is_approved_payment)

@router.message(Registration.is_approved_payment)
async def handle_is_approved_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(is_approved_payment=1)
    await state.clear()