import logging

from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import ReplyKeyboardRemove

import app.keyboards as keyboards
from app.database.requests import post_user, get_roommates
from app.keyboards import room_keyboard

#from app.database.requests import post_user

router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–Ω–∫–µ—Ç—ã
class Registration(StatesGroup):
    surname = State()
    name = State()
    gender = State()
    faculty = State()
    specialty = State()
    course = State()
    city = State()
    room = State()

@router.message(Command('start'))
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboards.main)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(F.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù")
async def register(message: Message, state: FSMContext):
    await state.set_state(Registration.surname)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
@router.message(Registration.surname)
async def register_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(Registration.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@router.message(Registration.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.gender)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=keyboards.gender_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞
@router.callback_query(lambda c: c.data.startswith('gender_'))
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    gender = callback_query.data.split('_')[1]
    ru_gender = {
        "male": "–ú—É–∂—Å–∫–æ–π",
        "female": "–ñ–µ–Ω—Å–∫–∏–π"
    }
    await callback_query.message.edit_text(f"–í–∞—à –ø–æ–ª: {ru_gender[gender]}")
    await state.update_data(gender=gender)
    await state.set_state(Registration.faculty)
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=await keyboards.faculty_keyboard())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@router.callback_query(lambda c: c.data.startswith('faculty_'))
async def process_faculty(callback_query: CallbackQuery, state: FSMContext):
    logging.info(f"Received callback data: {callback_query.data}")
    faculty = callback_query.data.split('_', 1)[1]
    await state.update_data(faculty=faculty)
    await state.set_state(Registration.specialty)

    await callback_query.message.delete()

    specialty_keyboard = await keyboards.specialty_keyboard(faculty)
    await callback_query.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {faculty}:',
        reply_markup=specialty_keyboard
    )

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
@router.callback_query(lambda c: c.data.startswith('specialty_'))
async def process_specialty(callback_query: CallbackQuery, state: FSMContext):
    specialty = callback_query.data.split('_')[1]
    print("--------> " + specialty)
    await state.update_data(specialty=specialty)

    await state.set_state(Registration.room)

    data = await state.get_data()
    gender = data['gender']

    markup = await keyboards.room_keyboard(int(specialty), gender, page=1)

    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:', reply_markup=markup)

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("pagination_"))
async def handle_pagination(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback_query.data.split("_")[1])
    data = await state.get_data()

    specialty_id = data.get("specialty")
    gender = data.get("gender")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = await keyboards.room_keyboard(specialty_id, gender, page)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@router.callback_query(lambda c: c.data == 'back')
async def process_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await state.set_state(Registration.faculty)

    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=await keyboards.faculty_keyboard())

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith('room_'))
async def register_course(callback_query: CallbackQuery, state: FSMContext):
    room = callback_query.data.split('_')[1]
    await state.update_data(room=room)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É {room} –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
        reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    list_roommates = await get_roommates(room)
    await callback_query.message.answer(str(list_roommates), reply_markup=keyboards.book)
    return room


@router.message(F.text == '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
async def process_book(message: Message, state: FSMContext):
    data = await state.get_data()
    room = data['room']
    await state.update_data(room=room)

    await state.set_state(Registration.course)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å: ", reply_markup=ReplyKeyboardRemove()
)

@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
async def process_book(message: Message, state: FSMContext):
    await state.set_state(Registration.room)

    data = await state.get_data()
    specialty = data['specialty']
    gender = data['gender']

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:', reply_markup=await keyboards.room_keyboard(int(specialty), gender))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
@router.message(Registration.course)
async def register_course(message: Message, state: FSMContext):
    await state.update_data(course=message.text)
    await state.set_state(Registration.city)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:')

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Registration.city)
async def register_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    await post_user(data)

    await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                         f'–§–∞–º–∏–ª–∏—è: {data["surname"]}\n'
                         f'–ò–º—è: {data["name"]}\n'
                         f'–ü–æ–ª: {data["gender"]}\n'
                         f'–§–∞–∫—É–ª—å—Ç–µ—Ç: {data["faculty"]}\n'
                         f'–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {data["specialty"]}\n'
                         f'–ö—É—Ä—Å: {data["course"]}\n'
                         f'–ì–æ—Ä–æ–¥: {data["city"]}\n'
                         f'–ö–æ–º–Ω–∞—Ç–∞: {data.get("room", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")}\n')
    await state.clear()

